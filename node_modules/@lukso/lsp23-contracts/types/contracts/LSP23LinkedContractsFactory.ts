/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ILSP23LinkedContractsFactory {
  export type PrimaryContractDeploymentStruct = {
    salt: BytesLike;
    fundingAmount: BigNumberish;
    creationBytecode: BytesLike;
  };

  export type PrimaryContractDeploymentStructOutput = [
    salt: string,
    fundingAmount: bigint,
    creationBytecode: string
  ] & { salt: string; fundingAmount: bigint; creationBytecode: string };

  export type SecondaryContractDeploymentStruct = {
    fundingAmount: BigNumberish;
    creationBytecode: BytesLike;
    addPrimaryContractAddress: boolean;
    extraConstructorParams: BytesLike;
  };

  export type SecondaryContractDeploymentStructOutput = [
    fundingAmount: bigint,
    creationBytecode: string,
    addPrimaryContractAddress: boolean,
    extraConstructorParams: string
  ] & {
    fundingAmount: bigint;
    creationBytecode: string;
    addPrimaryContractAddress: boolean;
    extraConstructorParams: string;
  };

  export type PrimaryContractDeploymentInitStruct = {
    salt: BytesLike;
    fundingAmount: BigNumberish;
    implementationContract: AddressLike;
    initializationCalldata: BytesLike;
  };

  export type PrimaryContractDeploymentInitStructOutput = [
    salt: string,
    fundingAmount: bigint,
    implementationContract: string,
    initializationCalldata: string
  ] & {
    salt: string;
    fundingAmount: bigint;
    implementationContract: string;
    initializationCalldata: string;
  };

  export type SecondaryContractDeploymentInitStruct = {
    fundingAmount: BigNumberish;
    implementationContract: AddressLike;
    initializationCalldata: BytesLike;
    addPrimaryContractAddress: boolean;
    extraInitializationParams: BytesLike;
  };

  export type SecondaryContractDeploymentInitStructOutput = [
    fundingAmount: bigint,
    implementationContract: string,
    initializationCalldata: string,
    addPrimaryContractAddress: boolean,
    extraInitializationParams: string
  ] & {
    fundingAmount: bigint;
    implementationContract: string;
    initializationCalldata: string;
    addPrimaryContractAddress: boolean;
    extraInitializationParams: string;
  };
}

export interface LSP23LinkedContractsFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "computeAddresses"
      | "computeERC1167Addresses"
      | "deployContracts"
      | "deployERC1167Proxies"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DeployedContracts" | "DeployedERC1167Proxies"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "computeAddresses",
    values: [
      ILSP23LinkedContractsFactory.PrimaryContractDeploymentStruct,
      ILSP23LinkedContractsFactory.SecondaryContractDeploymentStruct,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeERC1167Addresses",
    values: [
      ILSP23LinkedContractsFactory.PrimaryContractDeploymentInitStruct,
      ILSP23LinkedContractsFactory.SecondaryContractDeploymentInitStruct,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployContracts",
    values: [
      ILSP23LinkedContractsFactory.PrimaryContractDeploymentStruct,
      ILSP23LinkedContractsFactory.SecondaryContractDeploymentStruct,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployERC1167Proxies",
    values: [
      ILSP23LinkedContractsFactory.PrimaryContractDeploymentInitStruct,
      ILSP23LinkedContractsFactory.SecondaryContractDeploymentInitStruct,
      AddressLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeERC1167Addresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployERC1167Proxies",
    data: BytesLike
  ): Result;
}

export namespace DeployedContractsEvent {
  export type InputTuple = [
    primaryContract: AddressLike,
    secondaryContract: AddressLike,
    primaryContractDeployment: ILSP23LinkedContractsFactory.PrimaryContractDeploymentStruct,
    secondaryContractDeployment: ILSP23LinkedContractsFactory.SecondaryContractDeploymentStruct,
    postDeploymentModule: AddressLike,
    postDeploymentModuleCalldata: BytesLike
  ];
  export type OutputTuple = [
    primaryContract: string,
    secondaryContract: string,
    primaryContractDeployment: ILSP23LinkedContractsFactory.PrimaryContractDeploymentStructOutput,
    secondaryContractDeployment: ILSP23LinkedContractsFactory.SecondaryContractDeploymentStructOutput,
    postDeploymentModule: string,
    postDeploymentModuleCalldata: string
  ];
  export interface OutputObject {
    primaryContract: string;
    secondaryContract: string;
    primaryContractDeployment: ILSP23LinkedContractsFactory.PrimaryContractDeploymentStructOutput;
    secondaryContractDeployment: ILSP23LinkedContractsFactory.SecondaryContractDeploymentStructOutput;
    postDeploymentModule: string;
    postDeploymentModuleCalldata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeployedERC1167ProxiesEvent {
  export type InputTuple = [
    primaryContract: AddressLike,
    secondaryContract: AddressLike,
    primaryContractDeploymentInit: ILSP23LinkedContractsFactory.PrimaryContractDeploymentInitStruct,
    secondaryContractDeploymentInit: ILSP23LinkedContractsFactory.SecondaryContractDeploymentInitStruct,
    postDeploymentModule: AddressLike,
    postDeploymentModuleCalldata: BytesLike
  ];
  export type OutputTuple = [
    primaryContract: string,
    secondaryContract: string,
    primaryContractDeploymentInit: ILSP23LinkedContractsFactory.PrimaryContractDeploymentInitStructOutput,
    secondaryContractDeploymentInit: ILSP23LinkedContractsFactory.SecondaryContractDeploymentInitStructOutput,
    postDeploymentModule: string,
    postDeploymentModuleCalldata: string
  ];
  export interface OutputObject {
    primaryContract: string;
    secondaryContract: string;
    primaryContractDeploymentInit: ILSP23LinkedContractsFactory.PrimaryContractDeploymentInitStructOutput;
    secondaryContractDeploymentInit: ILSP23LinkedContractsFactory.SecondaryContractDeploymentInitStructOutput;
    postDeploymentModule: string;
    postDeploymentModuleCalldata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LSP23LinkedContractsFactory extends BaseContract {
  connect(runner?: ContractRunner | null): LSP23LinkedContractsFactory;
  waitForDeployment(): Promise<this>;

  interface: LSP23LinkedContractsFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  computeAddresses: TypedContractMethod<
    [
      primaryContractDeployment: ILSP23LinkedContractsFactory.PrimaryContractDeploymentStruct,
      secondaryContractDeployment: ILSP23LinkedContractsFactory.SecondaryContractDeploymentStruct,
      postDeploymentModule: AddressLike,
      postDeploymentModuleCalldata: BytesLike
    ],
    [
      [string, string] & {
        primaryContractAddress: string;
        secondaryContractAddress: string;
      }
    ],
    "view"
  >;

  computeERC1167Addresses: TypedContractMethod<
    [
      primaryContractDeploymentInit: ILSP23LinkedContractsFactory.PrimaryContractDeploymentInitStruct,
      secondaryContractDeploymentInit: ILSP23LinkedContractsFactory.SecondaryContractDeploymentInitStruct,
      postDeploymentModule: AddressLike,
      postDeploymentModuleCalldata: BytesLike
    ],
    [
      [string, string] & {
        primaryContractAddress: string;
        secondaryContractAddress: string;
      }
    ],
    "view"
  >;

  deployContracts: TypedContractMethod<
    [
      primaryContractDeployment: ILSP23LinkedContractsFactory.PrimaryContractDeploymentStruct,
      secondaryContractDeployment: ILSP23LinkedContractsFactory.SecondaryContractDeploymentStruct,
      postDeploymentModule: AddressLike,
      postDeploymentModuleCalldata: BytesLike
    ],
    [
      [string, string] & {
        primaryContractAddress: string;
        secondaryContractAddress: string;
      }
    ],
    "payable"
  >;

  deployERC1167Proxies: TypedContractMethod<
    [
      primaryContractDeploymentInit: ILSP23LinkedContractsFactory.PrimaryContractDeploymentInitStruct,
      secondaryContractDeploymentInit: ILSP23LinkedContractsFactory.SecondaryContractDeploymentInitStruct,
      postDeploymentModule: AddressLike,
      postDeploymentModuleCalldata: BytesLike
    ],
    [
      [string, string] & {
        primaryContractAddress: string;
        secondaryContractAddress: string;
      }
    ],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "computeAddresses"
  ): TypedContractMethod<
    [
      primaryContractDeployment: ILSP23LinkedContractsFactory.PrimaryContractDeploymentStruct,
      secondaryContractDeployment: ILSP23LinkedContractsFactory.SecondaryContractDeploymentStruct,
      postDeploymentModule: AddressLike,
      postDeploymentModuleCalldata: BytesLike
    ],
    [
      [string, string] & {
        primaryContractAddress: string;
        secondaryContractAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeERC1167Addresses"
  ): TypedContractMethod<
    [
      primaryContractDeploymentInit: ILSP23LinkedContractsFactory.PrimaryContractDeploymentInitStruct,
      secondaryContractDeploymentInit: ILSP23LinkedContractsFactory.SecondaryContractDeploymentInitStruct,
      postDeploymentModule: AddressLike,
      postDeploymentModuleCalldata: BytesLike
    ],
    [
      [string, string] & {
        primaryContractAddress: string;
        secondaryContractAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deployContracts"
  ): TypedContractMethod<
    [
      primaryContractDeployment: ILSP23LinkedContractsFactory.PrimaryContractDeploymentStruct,
      secondaryContractDeployment: ILSP23LinkedContractsFactory.SecondaryContractDeploymentStruct,
      postDeploymentModule: AddressLike,
      postDeploymentModuleCalldata: BytesLike
    ],
    [
      [string, string] & {
        primaryContractAddress: string;
        secondaryContractAddress: string;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deployERC1167Proxies"
  ): TypedContractMethod<
    [
      primaryContractDeploymentInit: ILSP23LinkedContractsFactory.PrimaryContractDeploymentInitStruct,
      secondaryContractDeploymentInit: ILSP23LinkedContractsFactory.SecondaryContractDeploymentInitStruct,
      postDeploymentModule: AddressLike,
      postDeploymentModuleCalldata: BytesLike
    ],
    [
      [string, string] & {
        primaryContractAddress: string;
        secondaryContractAddress: string;
      }
    ],
    "payable"
  >;

  getEvent(
    key: "DeployedContracts"
  ): TypedContractEvent<
    DeployedContractsEvent.InputTuple,
    DeployedContractsEvent.OutputTuple,
    DeployedContractsEvent.OutputObject
  >;
  getEvent(
    key: "DeployedERC1167Proxies"
  ): TypedContractEvent<
    DeployedERC1167ProxiesEvent.InputTuple,
    DeployedERC1167ProxiesEvent.OutputTuple,
    DeployedERC1167ProxiesEvent.OutputObject
  >;

  filters: {
    "DeployedContracts(address,address,tuple,tuple,address,bytes)": TypedContractEvent<
      DeployedContractsEvent.InputTuple,
      DeployedContractsEvent.OutputTuple,
      DeployedContractsEvent.OutputObject
    >;
    DeployedContracts: TypedContractEvent<
      DeployedContractsEvent.InputTuple,
      DeployedContractsEvent.OutputTuple,
      DeployedContractsEvent.OutputObject
    >;

    "DeployedERC1167Proxies(address,address,tuple,tuple,address,bytes)": TypedContractEvent<
      DeployedERC1167ProxiesEvent.InputTuple,
      DeployedERC1167ProxiesEvent.OutputTuple,
      DeployedERC1167ProxiesEvent.OutputObject
    >;
    DeployedERC1167Proxies: TypedContractEvent<
      DeployedERC1167ProxiesEvent.InputTuple,
      DeployedERC1167ProxiesEvent.OutputTuple,
      DeployedERC1167ProxiesEvent.OutputObject
    >;
  };
}
