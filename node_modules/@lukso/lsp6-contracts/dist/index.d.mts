import { LSP2ArrayKey } from '@lukso/lsp2-contracts';

declare const INTERFACE_ID_LSP6KEYMANAGER = "0x23f34c62";
/**
 * @dev values returned by the `isValidSignature` function of the ERC1271 standard.
 * Can be used to check if a signature is valid or not.
 */
declare const ERC1271_VALUES: {
    SUCCESS_VALUE: string;
    FAIL_VALUE: string;
};
declare const LSP6DataKeys: {
    'AddressPermissions[]': LSP2ArrayKey;
    AddressPermissionsPrefix: string;
    'AddressPermissions:Permissions': string;
    'AddressPermissions:AllowedERC725YDataKeys': string;
    'AddressPermissions:AllowedCalls': string;
};
/**
 * @dev The types of calls for an AllowedCall
 */
declare const CALLTYPE: {
    VALUE: string;
    CALL: string;
    STATICCALL: string;
    DELEGATECALL: string;
};
/**
 * @dev `bytes32` hex value for all the LSP6 permissions excluding REENTRANCY, DELEGATECALL and SUPER_DELEGATECALL for security (these should be set manually)
 */
declare const ALL_PERMISSIONS = "0x00000000000000000000000000000000000000000000000000000000007f3f7f";
/**
 * @dev List of `bytes32` permissions from LSP6 Key Manager Standard
 */
declare const PERMISSIONS: {
    CHANGEOWNER: string;
    ADDCONTROLLER: string;
    EDITPERMISSIONS: string;
    ADDEXTENSIONS: string;
    CHANGEEXTENSIONS: string;
    ADDUNIVERSALRECEIVERDELEGATE: string;
    CHANGEUNIVERSALRECEIVERDELEGATE: string;
    REENTRANCY: string;
    SUPER_TRANSFERVALUE: string;
    TRANSFERVALUE: string;
    SUPER_CALL: string;
    CALL: string;
    SUPER_STATICCALL: string;
    STATICCALL: string;
    SUPER_DELEGATECALL: string;
    DELEGATECALL: string;
    DEPLOY: string;
    SUPER_SETDATA: string;
    SETDATA: string;
    ENCRYPT: string;
    DECRYPT: string;
    SIGN: string;
    EXECUTE_RELAY_CALL: string;
};
type LSP6PermissionName = keyof typeof PERMISSIONS;

export { ALL_PERMISSIONS, CALLTYPE, ERC1271_VALUES, INTERFACE_ID_LSP6KEYMANAGER, LSP6DataKeys, type LSP6PermissionName, PERMISSIONS };
