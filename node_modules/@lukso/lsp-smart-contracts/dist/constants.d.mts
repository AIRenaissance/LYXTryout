import * as _lukso_lsp2_contracts from '@lukso/lsp2-contracts';

/**
 * Set of constants values as defined in each LUKSO Standards Proposals (LSPs).
 * @see https://github.com/lukso-network/LIPs/tree/main/LSPs
 */
declare const SupportedStandards: {
    LSP3Profile: LSPSupportedStandard;
    LSP4DigitalAsset: LSPSupportedStandard;
    LSP9Vault: LSPSupportedStandard;
};
/**
 * @dev ERC165 interface IDs for the LSP interface standards + some backward compatible ERC token standards.
 * These `bytes4` values can be used to detect if a contract implements a specific interface
 * with `supportsInterface(interfaceId)`.
 */
declare const INTERFACE_IDS: {
    ERC165: string;
    ERC1271: string;
    ERC20: string;
    ERC20Metadata: string;
    ERC223: string;
    ERC721: string;
    ERC721Metadata: string;
    ERC777: string;
    ERC1155: string;
    ERC725X: string;
    ERC725Y: string;
    LSP0ERC725Account: string;
    LSP1UniversalReceiver: string;
    LSP1UniversalReceiverDelegate: string;
    LSP6KeyManager: string;
    LSP7DigitalAsset: string;
    LSP8IdentifiableDigitalAsset: string;
    LSP9Vault: string;
    LSP14Ownable2Step: string;
    LSP17Extendable: string;
    LSP17Extension: string;
    LSP20CallVerification: string;
    LSP20CallVerifier: string;
    LSP11BasicSocialRecovery: string;
    LSP25ExecuteRelayCall: string;
};
type LSPSupportedStandard = {
    key: string;
    value: string;
};
/**
 * @dev list of ERC725Y Metadata keys from the LSP standards.
 * @see https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-2-ERC725YJSONSchema.md
 */
declare const ERC725YDataKeys: {
    LSP1: {
        LSP1UniversalReceiverDelegatePrefix: string;
        LSP1UniversalReceiverDelegate: string;
    };
    LSP3: {
        SupportedStandards_LSP3: string;
        LSP3Profile: string;
    };
    LSP4: {
        SupportedStandards_LSP4: string;
        LSP4TokenName: string;
        LSP4TokenSymbol: string;
        LSP4TokenType: string;
        LSP4Metadata: string;
        LSP4CreatorsMap: string;
        'LSP4Creators[]': _lukso_lsp2_contracts.LSP2ArrayKey;
    };
    LSP5: {
        LSP5ReceivedAssetsMap: string;
        'LSP5ReceivedAssets[]': _lukso_lsp2_contracts.LSP2ArrayKey;
    };
    LSP6: {
        'AddressPermissions[]': _lukso_lsp2_contracts.LSP2ArrayKey;
        AddressPermissionsPrefix: string;
        'AddressPermissions:Permissions': string;
        'AddressPermissions:AllowedERC725YDataKeys': string;
        'AddressPermissions:AllowedCalls': string;
    };
    LSP8: {
        LSP8TokenIdFormat: string;
        LSP8TokenMetadataBaseURI: string;
        LSP8ReferenceContract: string;
    };
    LSP9: {
        SupportedStandards_LSP9: string;
    };
    LSP10: {
        LSP10VaultsMap: string;
        'LSP10Vaults[]': _lukso_lsp2_contracts.LSP2ArrayKey;
    };
    LSP12: {
        LSP12IssuedAssetsMap: string;
        'LSP12IssuedAssets[]': _lukso_lsp2_contracts.LSP2ArrayKey;
    };
    LSP17: {
        LSP17ExtensionPrefix: string;
    };
};
declare const LSP1_TYPE_IDS: {
    LSP14OwnershipTransferStarted: string;
    LSP14OwnershipTransferred_SenderNotification: string;
    LSP14OwnershipTransferred_RecipientNotification: string;
    LSP9ValueReceived: string;
    LSP9OwnershipTransferStarted: string;
    LSP9OwnershipTransferred_SenderNotification: string;
    LSP9OwnershipTransferred_RecipientNotification: string;
    LSP8Tokens_SenderNotification: string;
    LSP8Tokens_RecipientNotification: string;
    LSP8Tokens_OperatorNotification: string;
    LSP7Tokens_SenderNotification: string;
    LSP7Tokens_RecipientNotification: string;
    LSP7Tokens_OperatorNotification: string;
    LSP0ValueReceived: string;
    LSP0OwnershipTransferStarted: string;
    LSP0OwnershipTransferred_SenderNotification: string;
    LSP0OwnershipTransferred_RecipientNotification: string;
};

export { ERC725YDataKeys, INTERFACE_IDS, LSP1_TYPE_IDS, type LSPSupportedStandard, SupportedStandards };
