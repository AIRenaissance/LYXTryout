/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface LSP6KeyManagerInitInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "VERSION"
      | "execute"
      | "executeBatch"
      | "executeRelayCall"
      | "executeRelayCallBatch"
      | "getNonce"
      | "initialize"
      | "isValidSignature"
      | "lsp20VerifyCall"
      | "lsp20VerifyCallResult"
      | "supportsInterface"
      | "target"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Initialized" | "PermissionsVerified"
  ): EventFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "execute", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRelayCall",
    values: [BytesLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRelayCallBatch",
    values: [
      BytesLike[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lsp20VerifyCall",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lsp20VerifyCallResult",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRelayCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRelayCallBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lsp20VerifyCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lsp20VerifyCallResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionsVerifiedEvent {
  export type InputTuple = [
    signer: AddressLike,
    value: BigNumberish,
    selector: BytesLike
  ];
  export type OutputTuple = [signer: string, value: bigint, selector: string];
  export interface OutputObject {
    signer: string;
    value: bigint;
    selector: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LSP6KeyManagerInit extends BaseContract {
  connect(runner?: ContractRunner | null): LSP6KeyManagerInit;
  waitForDeployment(): Promise<this>;

  interface: LSP6KeyManagerInitInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  VERSION: TypedContractMethod<[], [string], "view">;

  execute: TypedContractMethod<[payload: BytesLike], [string], "payable">;

  executeBatch: TypedContractMethod<
    [values: BigNumberish[], payloads: BytesLike[]],
    [string[]],
    "payable"
  >;

  executeRelayCall: TypedContractMethod<
    [
      signature: BytesLike,
      nonce: BigNumberish,
      validityTimestamps: BigNumberish,
      payload: BytesLike
    ],
    [string],
    "payable"
  >;

  executeRelayCallBatch: TypedContractMethod<
    [
      signatures: BytesLike[],
      nonces: BigNumberish[],
      validityTimestamps: BigNumberish[],
      values: BigNumberish[],
      payloads: BytesLike[]
    ],
    [string[]],
    "payable"
  >;

  getNonce: TypedContractMethod<
    [from: AddressLike, channelId: BigNumberish],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<[target_: AddressLike], [void], "nonpayable">;

  isValidSignature: TypedContractMethod<
    [dataHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  lsp20VerifyCall: TypedContractMethod<
    [
      arg0: AddressLike,
      targetContract: AddressLike,
      caller: AddressLike,
      msgValue: BigNumberish,
      callData: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  lsp20VerifyCallResult: TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [string],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  target: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<[payload: BytesLike], [string], "payable">;
  getFunction(
    nameOrSignature: "executeBatch"
  ): TypedContractMethod<
    [values: BigNumberish[], payloads: BytesLike[]],
    [string[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeRelayCall"
  ): TypedContractMethod<
    [
      signature: BytesLike,
      nonce: BigNumberish,
      validityTimestamps: BigNumberish,
      payload: BytesLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeRelayCallBatch"
  ): TypedContractMethod<
    [
      signatures: BytesLike[],
      nonces: BigNumberish[],
      validityTimestamps: BigNumberish[],
      values: BigNumberish[],
      payloads: BytesLike[]
    ],
    [string[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<
    [from: AddressLike, channelId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[target_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<
    [dataHash: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "lsp20VerifyCall"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      targetContract: AddressLike,
      caller: AddressLike,
      msgValue: BigNumberish,
      callData: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lsp20VerifyCallResult"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "target"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "PermissionsVerified"
  ): TypedContractEvent<
    PermissionsVerifiedEvent.InputTuple,
    PermissionsVerifiedEvent.OutputTuple,
    PermissionsVerifiedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "PermissionsVerified(address,uint256,bytes4)": TypedContractEvent<
      PermissionsVerifiedEvent.InputTuple,
      PermissionsVerifiedEvent.OutputTuple,
      PermissionsVerifiedEvent.OutputObject
    >;
    PermissionsVerified: TypedContractEvent<
      PermissionsVerifiedEvent.InputTuple,
      PermissionsVerifiedEvent.OutputTuple,
      PermissionsVerifiedEvent.OutputObject
    >;
  };
}
