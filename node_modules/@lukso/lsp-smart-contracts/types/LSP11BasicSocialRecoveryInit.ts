/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface LSP11BasicSocialRecoveryInitInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addGuardian"
      | "getGuardianChoice"
      | "getGuardians"
      | "getGuardiansThreshold"
      | "getRecoveryCounter"
      | "getRecoverySecretHash"
      | "initialize"
      | "isGuardian"
      | "owner"
      | "recoverOwnership"
      | "removeGuardian"
      | "renounceOwnership"
      | "selectNewController"
      | "setGuardiansThreshold"
      | "setRecoverySecretHash"
      | "supportsInterface"
      | "target"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GuardianAdded"
      | "GuardianRemoved"
      | "GuardiansThresholdChanged"
      | "Initialized"
      | "OwnershipTransferred"
      | "RecoveryProcessSuccessful"
      | "SecretHashChanged"
      | "SelectedNewController"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addGuardian",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGuardianChoice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGuardians",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGuardiansThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoverySecretHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isGuardian",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverOwnership",
    values: [AddressLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGuardian",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectNewController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGuardiansThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecoverySecretHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGuardianChoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGuardians",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGuardiansThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoverySecretHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGuardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectNewController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGuardiansThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecoverySecretHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace GuardianAddedEvent {
  export type InputTuple = [newGuardian: AddressLike];
  export type OutputTuple = [newGuardian: string];
  export interface OutputObject {
    newGuardian: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GuardianRemovedEvent {
  export type InputTuple = [removedGuardian: AddressLike];
  export type OutputTuple = [removedGuardian: string];
  export interface OutputObject {
    removedGuardian: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GuardiansThresholdChangedEvent {
  export type InputTuple = [guardianThreshold: BigNumberish];
  export type OutputTuple = [guardianThreshold: bigint];
  export interface OutputObject {
    guardianThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveryProcessSuccessfulEvent {
  export type InputTuple = [
    recoveryCounter: BigNumberish,
    newController: AddressLike,
    newSecretHash: BytesLike,
    guardians: AddressLike[]
  ];
  export type OutputTuple = [
    recoveryCounter: bigint,
    newController: string,
    newSecretHash: string,
    guardians: string[]
  ];
  export interface OutputObject {
    recoveryCounter: bigint;
    newController: string;
    newSecretHash: string;
    guardians: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecretHashChangedEvent {
  export type InputTuple = [secretHash: BytesLike];
  export type OutputTuple = [secretHash: string];
  export interface OutputObject {
    secretHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SelectedNewControllerEvent {
  export type InputTuple = [
    recoveryCounter: BigNumberish,
    guardian: AddressLike,
    addressSelected: AddressLike
  ];
  export type OutputTuple = [
    recoveryCounter: bigint,
    guardian: string,
    addressSelected: string
  ];
  export interface OutputObject {
    recoveryCounter: bigint;
    guardian: string;
    addressSelected: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LSP11BasicSocialRecoveryInit extends BaseContract {
  connect(runner?: ContractRunner | null): LSP11BasicSocialRecoveryInit;
  waitForDeployment(): Promise<this>;

  interface: LSP11BasicSocialRecoveryInitInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addGuardian: TypedContractMethod<
    [newGuardian: AddressLike],
    [void],
    "nonpayable"
  >;

  getGuardianChoice: TypedContractMethod<
    [guardian: AddressLike],
    [string],
    "view"
  >;

  getGuardians: TypedContractMethod<[], [string[]], "view">;

  getGuardiansThreshold: TypedContractMethod<[], [bigint], "view">;

  getRecoveryCounter: TypedContractMethod<[], [bigint], "view">;

  getRecoverySecretHash: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [target_: AddressLike, _owner: AddressLike],
    [void],
    "nonpayable"
  >;

  isGuardian: TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  recoverOwnership: TypedContractMethod<
    [recoverer: AddressLike, plainSecret: string, newSecretHash: BytesLike],
    [void],
    "nonpayable"
  >;

  removeGuardian: TypedContractMethod<
    [existingGuardian: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  selectNewController: TypedContractMethod<
    [addressSelected: AddressLike],
    [void],
    "nonpayable"
  >;

  setGuardiansThreshold: TypedContractMethod<
    [newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRecoverySecretHash: TypedContractMethod<
    [newRecoverSecretHash: BytesLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  target: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addGuardian"
  ): TypedContractMethod<[newGuardian: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getGuardianChoice"
  ): TypedContractMethod<[guardian: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getGuardians"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getGuardiansThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRecoveryCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRecoverySecretHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [target_: AddressLike, _owner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isGuardian"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recoverOwnership"
  ): TypedContractMethod<
    [recoverer: AddressLike, plainSecret: string, newSecretHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeGuardian"
  ): TypedContractMethod<[existingGuardian: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "selectNewController"
  ): TypedContractMethod<[addressSelected: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGuardiansThreshold"
  ): TypedContractMethod<[newThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRecoverySecretHash"
  ): TypedContractMethod<
    [newRecoverSecretHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "target"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "GuardianAdded"
  ): TypedContractEvent<
    GuardianAddedEvent.InputTuple,
    GuardianAddedEvent.OutputTuple,
    GuardianAddedEvent.OutputObject
  >;
  getEvent(
    key: "GuardianRemoved"
  ): TypedContractEvent<
    GuardianRemovedEvent.InputTuple,
    GuardianRemovedEvent.OutputTuple,
    GuardianRemovedEvent.OutputObject
  >;
  getEvent(
    key: "GuardiansThresholdChanged"
  ): TypedContractEvent<
    GuardiansThresholdChangedEvent.InputTuple,
    GuardiansThresholdChangedEvent.OutputTuple,
    GuardiansThresholdChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RecoveryProcessSuccessful"
  ): TypedContractEvent<
    RecoveryProcessSuccessfulEvent.InputTuple,
    RecoveryProcessSuccessfulEvent.OutputTuple,
    RecoveryProcessSuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "SecretHashChanged"
  ): TypedContractEvent<
    SecretHashChangedEvent.InputTuple,
    SecretHashChangedEvent.OutputTuple,
    SecretHashChangedEvent.OutputObject
  >;
  getEvent(
    key: "SelectedNewController"
  ): TypedContractEvent<
    SelectedNewControllerEvent.InputTuple,
    SelectedNewControllerEvent.OutputTuple,
    SelectedNewControllerEvent.OutputObject
  >;

  filters: {
    "GuardianAdded(address)": TypedContractEvent<
      GuardianAddedEvent.InputTuple,
      GuardianAddedEvent.OutputTuple,
      GuardianAddedEvent.OutputObject
    >;
    GuardianAdded: TypedContractEvent<
      GuardianAddedEvent.InputTuple,
      GuardianAddedEvent.OutputTuple,
      GuardianAddedEvent.OutputObject
    >;

    "GuardianRemoved(address)": TypedContractEvent<
      GuardianRemovedEvent.InputTuple,
      GuardianRemovedEvent.OutputTuple,
      GuardianRemovedEvent.OutputObject
    >;
    GuardianRemoved: TypedContractEvent<
      GuardianRemovedEvent.InputTuple,
      GuardianRemovedEvent.OutputTuple,
      GuardianRemovedEvent.OutputObject
    >;

    "GuardiansThresholdChanged(uint256)": TypedContractEvent<
      GuardiansThresholdChangedEvent.InputTuple,
      GuardiansThresholdChangedEvent.OutputTuple,
      GuardiansThresholdChangedEvent.OutputObject
    >;
    GuardiansThresholdChanged: TypedContractEvent<
      GuardiansThresholdChangedEvent.InputTuple,
      GuardiansThresholdChangedEvent.OutputTuple,
      GuardiansThresholdChangedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RecoveryProcessSuccessful(uint256,address,bytes32,address[])": TypedContractEvent<
      RecoveryProcessSuccessfulEvent.InputTuple,
      RecoveryProcessSuccessfulEvent.OutputTuple,
      RecoveryProcessSuccessfulEvent.OutputObject
    >;
    RecoveryProcessSuccessful: TypedContractEvent<
      RecoveryProcessSuccessfulEvent.InputTuple,
      RecoveryProcessSuccessfulEvent.OutputTuple,
      RecoveryProcessSuccessfulEvent.OutputObject
    >;

    "SecretHashChanged(bytes32)": TypedContractEvent<
      SecretHashChangedEvent.InputTuple,
      SecretHashChangedEvent.OutputTuple,
      SecretHashChangedEvent.OutputObject
    >;
    SecretHashChanged: TypedContractEvent<
      SecretHashChangedEvent.InputTuple,
      SecretHashChangedEvent.OutputTuple,
      SecretHashChangedEvent.OutputObject
    >;

    "SelectedNewController(uint256,address,address)": TypedContractEvent<
      SelectedNewControllerEvent.InputTuple,
      SelectedNewControllerEvent.OutputTuple,
      SelectedNewControllerEvent.OutputObject
    >;
    SelectedNewController: TypedContractEvent<
      SelectedNewControllerEvent.InputTuple,
      SelectedNewControllerEvent.OutputTuple,
      SelectedNewControllerEvent.OutputObject
    >;
  };
}
